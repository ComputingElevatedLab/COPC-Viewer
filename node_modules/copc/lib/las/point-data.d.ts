/// <reference types="emscripten" />
import { LazPerf } from 'laz-perf';
import { Binary } from '../utils';
import { Header } from './header';
export declare namespace PointData { }
export declare type PointData = {};
export declare const PointData: {
    createLazPerf: EmscriptenModuleFactory<import("laz-perf/lib/node/laz-perf").LazPerf>;
    decompressChunk: typeof decompressChunk;
    decompressFile: typeof decompressFile;
};
declare type ChunkMetadata = Pick<Header, 'pointCount' | 'pointDataRecordFormat' | 'pointDataRecordLength'>;
export declare function decompressChunk(compressed: Binary, { pointCount, pointDataRecordFormat, pointDataRecordLength }: ChunkMetadata, suppliedLazPerf?: LazPerf): Promise<Binary>;
export declare function decompressFile(file: Binary, suppliedLazPerf?: LazPerf): Promise<Binary>;
export {};
//# sourceMappingURL=point-data.d.ts.map