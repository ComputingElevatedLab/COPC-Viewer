"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.View = void 0;
const utils_1 = require("../utils");
const dimensions_1 = require("./dimensions");
const extractor_1 = require("./extractor");
exports.View = { create };
function create(buffer, header, eb = [], include) {
    let extractors = extractor_1.Extractor.create(header, eb);
    if (include) {
        const set = new Set([...include]);
        extractors = Object.entries(extractors).reduce((extractors, [name, getter]) => {
            if (set.has(name))
                extractors[name] = getter;
            return extractors;
        }, {});
        // console.log("i am extractor", extractors)

    }
    const dimensions = dimensions_1.Dimensions.create(extractors, eb);
    const dv = utils_1.Binary.toDataView(buffer);
    const pointLength = header.pointDataRecordLength;
    if (dv.byteLength % pointLength !== 0) {
        throw new Error(`Invalid buffer length (${dv.byteLength}) for point length ${pointLength}`);
    }
    const pointCount = dv.byteLength / header.pointDataRecordLength;
    function getter(name) {
        const extractor = extractors[name];
        if (!extractor)
            throw new Error(`No extractor for dimension: ${name}`);
        return function (index) {
            if (index >= pointCount) {
                throw new RangeError(`View index (${index}) out of range: ${pointCount}`);
            }
            return extractor(dv, index);
        };
    }
    return { pointCount, dimensions, getter };
}
