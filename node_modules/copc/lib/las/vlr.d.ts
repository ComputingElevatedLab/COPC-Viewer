import { Binary, Getter } from '../utils';
import { Header } from './header';
export declare type Vlr = {
    userId: string;
    recordId: number;
    contentOffset: number;
    contentLength: number;
    description: string;
    isExtended: boolean;
};
export declare namespace Vlr {
    type WithoutOffset = Omit<Vlr, 'contentOffset'>;
    type OffsetInfo = Pick<Header, 'headerLength' | 'vlrCount' | 'evlrOffset' | 'evlrCount'>;
}
export declare const Vlr: {
    walk: typeof walk;
    parse: typeof parse;
    find: typeof find;
    at: typeof at;
    fetch: typeof fetch;
};
declare function find(vlrs: Vlr[], userId: string, recordId: number): Vlr | undefined;
declare function at(vlrs: Vlr[], userId: string, recordId: number): Vlr;
declare function fetch(filename: string | Getter, { contentOffset, contentLength }: Vlr): Promise<Uint8Array>;
declare function walk(filename: string | Getter, header: Vlr.OffsetInfo): Promise<Vlr[]>;
declare function parse(buffer: Binary, isExtended?: boolean): Vlr.WithoutOffset;
export {};
//# sourceMappingURL=vlr.d.ts.map