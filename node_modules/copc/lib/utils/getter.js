"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Getter = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
exports.Getter = { create };
function create(arg) {
    if (typeof arg === 'function')
        return arg;
    if (arg.startsWith('http://') || arg.startsWith('https://')) {
        return getHttpGetter(arg);
    }
    return getFsGetter(arg);
}
function getHttpGetter(filename) {
    return async function getter(begin, end) {
        if (begin < 0 || end < 0 || begin > end)
            throw new Error('Invalid range');
        const response = await (0, cross_fetch_1.default)(filename, {
            headers: { Range: `bytes=${begin}-${end - 1}` },
        });
        const ab = await response.arrayBuffer();
        return new Uint8Array(ab);
    };
}
function getFsGetter(filename) {
    return async function getter(begin, end) {
        const fs = await Promise.resolve().then(() => __importStar(require('fs')));
        async function read(begin = 0, end = Infinity) {
            if (begin < 0 || end < 0 || begin > end)
                throw new Error('Invalid range');
            await fs.promises.access(filename);
            const stream = fs.createReadStream(filename, {
                start: begin,
                end: end - 1,
                autoClose: true,
            });
            return drain(stream);
        }
        return read(begin, end);
    };
}
async function drain(stream) {
    return await new Promise((resolve, reject) => {
        const chunks = [];
        stream.on('data', (chunk) => chunks.push(chunk));
        stream.on('error', reject);
        stream.on('end', () => resolve(Buffer.concat(chunks)));
    });
}
