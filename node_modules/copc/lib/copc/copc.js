"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Copc = void 0;
const Las = __importStar(require("../las"));
const utils_1 = require("../utils");
const hierarchy_1 = require("./hierarchy");
const info_1 = require("./info");
exports.Copc = {
    create,
    loadHierarchyPage,
    loadPointDataBuffer,
    loadPointDataView,
};
/**
 * Parse the COPC header and walk VLR and EVLR metadata.
 */
async function create(filename) {
    const get = utils_1.Getter.create(filename);
    const header = Las.Header.parse(await get(0, Las.Constants.minHeaderLength));
    const vlrs = await Las.Vlr.walk(get, header);
    const infoVlr = Las.Vlr.find(vlrs, 'copc', 1);
    if (!infoVlr)
        throw new Error('COPC info VLR is required');
    const info = info_1.Info.parse(await Las.Vlr.fetch(get, infoVlr));
    let wkt;
    const wktVlr = Las.Vlr.find(vlrs, 'LASF_Projection', 2112);
    if (wktVlr)
        wkt = utils_1.Binary.toCString(await Las.Vlr.fetch(get, wktVlr));
    let eb = [];
    const ebVlr = Las.Vlr.find(vlrs, 'LASF_Spec', 4);
    if (ebVlr)
        eb = Las.ExtraBytes.parse(await Las.Vlr.fetch(get, ebVlr));
    return { header, vlrs, info, wkt, eb };
}
async function loadHierarchyPage(filename, page) {
    const get = utils_1.Getter.create(filename);
    return hierarchy_1.Hierarchy.load(get, page);
}
async function loadCompressedPointDataBuffer(filename, { pointDataOffset, pointDataLength }) {
    const get = utils_1.Getter.create(filename);
    return get(pointDataOffset, pointDataOffset + pointDataLength);
}
async function loadPointDataBuffer(filename, { pointDataRecordFormat, pointDataRecordLength }, node, lazPerf) {
    const compressed = await loadCompressedPointDataBuffer(filename, node);
    const { pointCount } = node;
    return Las.PointData.decompressChunk(compressed, { pointCount, pointDataRecordFormat, pointDataRecordLength }, lazPerf);
}
async function loadPointDataView(filename, copc, node, { lazPerf, include } = {}) {
    const buffer = await loadPointDataBuffer(filename, copc.header, node, lazPerf);
    return Las.View.create(buffer, copc.header, copc.eb, include);
}
