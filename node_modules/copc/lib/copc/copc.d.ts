import type { LazPerf } from 'laz-perf';
import * as Las from '../las';
import { Getter } from '../utils';
import { Hierarchy } from './hierarchy';
import { Info } from './info';
export declare type Copc = {
    header: Las.Header;
    vlrs: Las.Vlr[];
    info: Info;
    eb: Las.ExtraBytes[];
    wkt?: string;
};
export declare const Copc: {
    create: typeof create;
    loadHierarchyPage: typeof loadHierarchyPage;
    loadPointDataBuffer: typeof loadPointDataBuffer;
    loadPointDataView: typeof loadPointDataView;
};
/**
 * Parse the COPC header and walk VLR and EVLR metadata.
 */
declare function create(filename: string | Getter): Promise<Copc>;
declare function loadHierarchyPage(filename: string | Getter, page: Hierarchy.Page): Promise<Hierarchy.Subtree>;
declare function loadPointDataBuffer(filename: string | Getter, { pointDataRecordFormat, pointDataRecordLength }: Las.Header, node: Hierarchy.Node, lazPerf?: LazPerf): Promise<Uint8Array>;
declare type Options = {
    lazPerf?: LazPerf;
    include?: string[];
};
declare function loadPointDataView(filename: string | Getter, copc: Copc, node: Hierarchy.Node, { lazPerf, include }?: Options): Promise<import("../utils").View>;
export {};
//# sourceMappingURL=copc.d.ts.map